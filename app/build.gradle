apply plugin: 'com.android.application'

ext.appName = "HC"
ext.appVersionName = "1.06"
ext.appReleaseDir = "E\\:/_AS/HC"


def loadProperties() {

    def proFile = file("../local.properties")
    Properties pro = new Properties()
    proFile.withInputStream { stream->
        pro.load(stream)
    }
    appReleaseDir = pro.appReleaseDir
//    appVersionCode = Integer.valueOf(p.appVersionCode)
   // appVersionName = pro.appVersionName
   // appSuffixName = pro.appSuffixName
}

loadProperties()

android {
    compileSdkVersion 20
    buildToolsVersion "25.0.0"
    defaultConfig {
        applicationId "com.hc"
        minSdkVersion 18
        targetSdkVersion 20
        versionCode 1
        versionName appVersionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        multiDexEnabled true
        ndk {
            abiFilters "armeabi", "x86"
        }
    }

    signingConfigs {
        release {
            storeFile file("..\\..\\_key\\hy.jks")
            storePassword "aserdfcv"
            keyAlias "HC"
            keyPassword "hcaserdfcv"
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        disable "ResourceType"
    }

    //修改生成的apk名字
    applicationVariants.all{ variant->
        variant.outputs.each { output->
            def path = appReleaseDir;
            def apkName = appName;
            if(variant.buildType.name == 'release'){
                //path += '/' + getDate()
              //  apkName += '.release'
            }
            if(variant.buildType.name == 'beta'){
                apkName += '.beta'
            }

            if(variant.buildType.name == 'debug'){
                apkName += '.debug'
            }
            output.outputFile = new File(path, apkName + '.apk')
        }
    }
}

//获取时间戳
def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyMMddHHmm')
    return formattedDate
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:20.0.0'
    compile 'com.android.support.constraint:constraint-layout:1.0.0-alpha7'
    testCompile 'junit:junit:4.12'
    compile files('libs/zypos1.5.jar')
    compile files('libs/zltd_decoder.jar')
    compile files('libs/scanSDK.jar')
    //compile files('libs/android-support-v7-appcompat.jar')
}

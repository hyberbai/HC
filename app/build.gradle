apply plugin: 'com.android.application'

ext.appName = "HC"
ext.appVersionName = "1.08"
ext.appReleaseDir = "../../"


def loadProperties() {

    def proFile = file("../local.properties")
    Properties pro = new Properties()
    proFile.withInputStream { stream->
        pro.load(stream)
    }
    appReleaseDir = pro.appReleaseDir
//    appVersionCode = Integer.valueOf(p.appVersionCode)
   // appVersionName = pro.appVersionName
   // appSuffixName = pro.appSuffixName
}

loadProperties()

android {
    compileSdkVersion 26
    buildToolsVersion "28.0.3"
    defaultConfig {
        applicationId "com.hc"
        minSdkVersion 18
        targetSdkVersion 26
        versionCode 1
        versionName appVersionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        multiDexEnabled true
//        ndk {
//            abiFilters "armeabi", "x86"
//        }
        splits {
            abi {
                enable true // 设为true，才能在打包时根据架构生成不同的apk文件
                reset()
                include 'x86', 'armeabi-v7a', 'x86_64' // 设置所有要支持的abi类型
                universalApk true    // If true, also generate a universal APK
            }
        }
    }

    signingConfigs {
        release {
            storeFile file("..\\..\\_key\\hc.jks")
            storePassword "hcaserdfcv"
            keyAlias "hckey"
            keyPassword "hcaserdfcv"
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        disable "ResourceType"
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all { output->
            //def path = appReleaseDir;
            def apkName = appName;
            if (variant.buildType.name == 'release') {
                //path += '/' + getDate()
                //apkName += '.release'
            }
            if (variant.buildType.name == 'beta') {
                apkName += '.beta'
            }

            if (variant.buildType.name == 'debug') {
                apkName += '.debug'
            }
            outputFileName = new File("../../../../../", "${ apkName }.apk")//
        }
    }
}

//获取时间戳
def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyMMddHHmm')
    return formattedDate
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation 'com.android.support:appcompat-v7:26.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    testImplementation 'junit:junit:4.12'
    implementation files('libs/zypos1.5.jar')
    implementation files('libs/zltd_decoder.jar')
    implementation files('libs/scanSDK.jar')
    //compile files('libs/android-support-v7-appcompat.jar')
}
